# -*- mode: ruby -*-
# # vi: set ft=ruby :

require 'fileutils'
require 'open-uri'
require 'tempfile'
require 'yaml'

Vagrant.require_version ">= 1.6.0"

$update_channel = "alpha"
$consul_count = 3
$consul_vm_memory = 512
$worker_count = 1
$worker_vm_memory = 512

CONSUL_CLOUD_CONFIG_PATH = File.expand_path("bootstrap/consul-server-install.sh")
WORKER_CLOUD_CONFIG_PATH = File.expand_path("bootstrap/worker-install.sh")

def consulIP(num)
  return "172.17.4.#{num+50}"
end

def workerIP(num)
  return "172.17.4.#{num+100}"
end

consulClusterSize = $consul_count
consulIPs = [*1..$consul_count].map{ |i| consulIP(i) }
workerIPs = [*1..$worker_count].map{ |i| workerIP(i) }
consuljoinServers = consulIPs.map.with_index{ |ip, i| "-join #{ip}" }.join(" ")

Vagrant.configure("2") do |config|
  # always use Vagrant's insecure key
  config.ssh.insert_key = false

  config.vm.box = "coreos-%s" % $update_channel
  config.vm.box_version = ">= 766.0.0"
  config.vm.box_url = "http://%s.release.core-os.net/amd64-usr/current/coreos_production_vagrant.json" % $update_channel

  ["vmware_fusion", "vmware_workstation"].each do |vmware|
    config.vm.provider vmware do |v, override|
      override.vm.box_url = "http://%s.release.core-os.net/amd64-usr/current/coreos_production_vagrant_vmware_fusion.json" % $update_channel
    end
  end

  config.vm.provider :virtualbox do |v|
    # On VirtualBox, we don't have guest additions or a functional vboxsf
    # in CoreOS, so tell Vagrant that so it can be smarter.
    v.check_guest_additions = false
    v.functional_vboxsf     = false
  end

  # plugin conflict
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  ["vmware_fusion", "vmware_workstation"].each do |vmware|
    config.vm.provider vmware do |v|
      v.vmx['numvcpus'] = 1
      v.gui = false
    end
  end

  config.vm.provider :virtualbox do |vb|
    vb.cpus = 1
    vb.gui = false
  end

  (1..$consul_count).each do |i|
    config.vm.define vm_name = "c%d" % i do |consul|

      env_file = Tempfile.new('env_file')
      env_file.write("CONSUL_CLUSTER_SIZE=#{consulClusterSize}\n")
      env_file.write("CONSUL_INITIAL_SERVER=#{consulIPs[0]}\n")
      env_file.close

      consul.vm.hostname = vm_name

      ["vmware_fusion", "vmware_workstation"].each do |vmware|
        consul.vm.provider vmware do |v|
          v.vmx['memsize'] = $consul_vm_memory
        end
      end

      consul.vm.provider :virtualbox do |vb|
        vb.memory = $consul_vm_memory
      end

      consul.vm.network :private_network, ip: consulIP(i)

      consul.vm.provision :file, :source => env_file, :destination => "/tmp/consul-options.env"
      consul.vm.provision :shell, :inline => "mkdir -p /run/consul && mv /tmp/consul-options.env /run/consul/options.env", :privileged => true

      consul.vm.provision :file, :source => CONSUL_CLOUD_CONFIG_PATH, :destination => "/tmp/vagrantfile-user-data"
      consul.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
    end
  end

  (1..$worker_count).each do |i|
    config.vm.define vm_name = "w%d" % i do |worker|
      worker.vm.hostname = vm_name

      env_file = Tempfile.new('env_file')
      env_file.write("CONSUL_JOIN_SERVERS=#{consuljoinServers}\n")
      env_file.close

      ["vmware_fusion", "vmware_workstation"].each do |vmware|
        worker.vm.provider vmware do |v|
          v.vmx['memsize'] = $worker_vm_memory
        end
      end

      worker.vm.provider :virtualbox do |vb|
        vb.memory = $worker_vm_memory
      end

      worker.vm.network :private_network, ip: workerIP(i)

      worker.vm.provision :file, :source => env_file, :destination => "/tmp/consul-options.env"
      worker.vm.provision :shell, :inline => "mkdir -p /run/consul && mv /tmp/consul-options.env /run/consul/options.env", :privileged => true

      worker.vm.provision :file, :source => WORKER_CLOUD_CONFIG_PATH, :destination => "/tmp/vagrantfile-user-data"
      worker.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
    end
  end

end
